// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  email     String    @unique
  password  String
  name      String
  role      Role
  createdAt DateTime
  updatedAt DateTime
  orders    Order[]
  cart      Cart?
  reviews   Review[]
  addresses Address[]
}

model Product {
  id          String      @id
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  createdAt   DateTime
  updatedAt   DateTime
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Category {
  id        String    @id
  name      String    @unique
  products  Product[]
  createdAt DateTime
}

model Cart {
  id        String     @id
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime
  updatedAt DateTime
}

model CartItem {
  id        String  @id
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Order {
  id        String      @id
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Float
  status    OrderStatus
  payment   Payment?
  address   Address     @relation(fields: [addressId], references: [id])
  addressId String
  createdAt DateTime
}

model OrderItem {
  id        String  @id
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Payment {
  id        String    @id
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String    @unique
  provider  String
  status    String
  reference String
  amount    Float
  paidAt    DateTime?
}

model Review {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime
}

model Address {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  Order      Order[]
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
